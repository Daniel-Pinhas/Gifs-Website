name: Gifs-Website 

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GKE_REGION: 'europe-west1'
  PROJECT_ID: 'lofty-dynamics-393510'

jobs:
  Versioning-Images:
    name: Versioning Application Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set environment variables
        run: echo "RDS_CREDS=${{ secrets.RDS_CREDS }}" >> $GITHUB_ENV

      - name: Run Python script
        run: python3 rds.py;
        working-directory: App/Flask-Project

      - name: Build and Push Flask-1 Image   
        run: >
          pip3 install docker;
          python3 manageVersion.py;
          echo 'Build and Push Flask-1 Image Stage Completed'
        working-directory: App/Flask-Project

      - name: Run Python script
        run: python3 rds.py;
        working-directory: App/Flask-Project2

      - name: Build and Push Flask-2 Image
        run: >
          python3 manageVersion.py;
          echo 'Build and Push Flask-2 Image Stage Completed'
        working-directory: App/Flask-Project2

      - name: Run Python script
        run: python3 rds.py;
        working-directory: App/Flask-Project3

      - name: Build and Push Flask-3 Image
        run: >
          python3 manageVersion.py;
          echo 'Build and Push Flask-3 Image Stage Completed'
        working-directory: App/Flask-Project3

  GKE-Setup-Testing-Cluster:
    name: Setup the GKE-Testing-Cluster
    needs: [Versioning-Images]
    runs-on: ubuntu-latest
    env:
      GKE_CLUSTER: "gifs-website-cluster-test"
      GKE_REGION: "europe-west1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIAL }}
      - name: Retrieve cluster info for use with kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
            cluster_name: "gifs-website-cluster-test"
            location: "europe-west1"
          
      - name: Install Dependencies
        run: >
          sudo apt install jq -y;
          sudo pip3 install docker;
        working-directory: charts-prod
          
      - name: Set environment variables
        run: echo "RDS_CREDS=${{ secrets.RDS_CREDS }}" >> $GITHUB_ENV

      - name: Run Python script
        run: python3 rds.py;
        working-directory: charts-prod
          
      - name: Run changeValues.sh
        run: >
          chmod +x changeTag.py;
          python3 changeTag.py danielpinhas/flask-k8s; 
          python3 changeTag.py danielpinhas/flask2-k8s;
          python3 changeTag.py danielpinhas/flask3-k8s;
        working-directory: charts-prod
          
      - name: Package Helm chart
        run: helm package charts-prod --app-version gifs-website-testing --destination .;
      
      - name: Deploy/Upgrade to Testing Env GCP Cluster
        run: helm upgrade --install gifs-website-testing . -f values.yml;
        working-directory: charts-prod

      - name: Run Modified ConfigMap
        run: >
          sleep 60;
          python3  updateConfig.py;
          kubectl apply -f config.yml;
        working-directory: k8s-prod
        
  Test-Testing-Cluster:
    name: Testing-Cluster
    needs: [GKE-Setup-Testing-Cluster]
    runs-on: ubuntu-latest
    env:
      GKE_CLUSTER: "gifs-website-cluster-test"
      GKE_REGION: "europe-west1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIAL }}
      - name: Retrieve cluster info for use with kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
            cluster_name: "gifs-website-cluster-test"
            location: "europe-west1"

      - name: Test-Testing-Cluster
        run: >
          python3 updateTest.py;      
        working-directory: tests   

      - name: Install Dependencies
        run: >
          cat prod.sh;
          bash prod.sh;
          echo Testing Test-Server Stage Completed;
        working-directory: tests

  GKE-Setup-Production-Cluster:
    name: Setup the GKE-Prod-Cluster
    needs: [Test-Testing-Cluster]
    runs-on: ubuntu-latest
    env:
      GKE_CLUSTER: "gifs-website-prod"
      GKE_REGION: "europe-west1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIAL }}
      - name: Retrieve cluster info for use with kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
            cluster_name: "gifs-website-prod"
            location: "europe-west1"
      - name: Activate GCP Service Account
        run: >
          exit 1
          sudo apt install jq -y; 
          sed -i "s|\$DEV_RDS_CREDS|${{ secrets.RDS_CREDS }}|"   
        working-directory: charts-prod

      - name: Deploy to Production Env GCP Cluster
        run: >
          chmod 600 /home/runner/work/Gifs-Website/Gifs-Website/gha-kubeconfig-83b3fe6b15653b51
          helm install my-release path/to/your/helm/chart -f path/to/your/values.yml
          kubectl config use-context gke_lofty-dynamics-393510_us-central1_gifs-website-prod; 
          bash changeTagflask.sh danielpinhas/flask-k8s;
          bash changeTagflask.sh danielpinhas/flask2-k8s;
          bash changeTagflask.sh danielpinhas/flask3-k8s;
          kubectl apply -f service-html.yml;
          kubectl apply -f flask-prod.yml;
          kubectl apply -f httpd-deploy-prod.yml;
          echo 'Deploy Application into Production GCP Cluster Completed';
        working-directory: charts-prod

  Test-Production-Server:
    name: Testing Prod-Server
    runs-on: ubuntu-latest
    needs: [GKE-Setup-Production-Cluster]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test Production Server
        run: >
          bash ingressIP.sh;
          bash prod.sh;
          echo 'Testing Prod-Server Stage Completed';
        working-directory: tests