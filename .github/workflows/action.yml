name: Gifs-Website

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GKE_REGION: 'us-central1'
  PROJECT_ID: 'lofty-dynamics-393510'

jobs:
  Versioning-Images:
    name: Versioning Application Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and Push Flask-1 Image   
        run: >
          pip3 install docker;
          python3 manageVersion.py;
          echo 'Build and Push Flask-1 Image Stage Completed'
        working-directory: App/Flask-Project

      - name: Build and Push Flask-2 Image
        run: >
          python3 manageVersion.py;
          echo 'Build and Push Flask-2 Image Stage Completed'
        working-directory: App/Flask-Project2

      - name: Build and Push Flask-3 Image
        run: >
          python3 manageVersion.py;
          echo 'Build and Push Flask-3 Image Stage Completed'
        working-directory: App/Flask-Project3

  GKE-Setup-Testing-Cluster:
    name: Setup the GKE-Testing-Cluster
    needs: [Versioning-Images]
    runs-on: ubuntu-latest
    env:
      GKE_CLUSTER: "gifs-website-test"
      GKE_REGION: "us-central1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIAL }}
      - name: Retrieve cluster info for use with kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
            cluster_name: "gifs-website-test"
            location: "us-central1"
      - name: Activate GCP Service Account
        run: >
          gcloud container clusters get-credentials gifs-website-test --region us-central1 --project lofty-dynamics-393510;
          sudo apt install jq -y;      
        working-directory: Terraform-Autopilot

      - name: Deploy to Testing Env GCP Cluster
        run: >
          bash changeTagflask.sh danielpinhas/flask-k8s;
          bash changeTagflask.sh danielpinhas/flask2-k8s;
          bash changeTagflask.sh danielpinhas/flask3-k8s;
          kubectl apply -f service-html.yml;
          kubectl apply -f flask-prod.yml;
          sleep 60;
          bash updateHTML.sh;
          kubectl apply -f httpd-deploy-prod.yml;
          echo 'Deploy Application into Rancher Desktop Completed';
        working-directory: charts-prod
        
  Test-Testing-Cluster:
    name: Testing Test-Cluster
    runs-on: ubuntu-latest
    needs: [GKE-Setup-Testing-Cluster]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test Testing Server
        run: >
          bash ingressIP.sh;
          bash test.sh;
          echo Testing Test-Server Stage Completed;
        working-directory: tests

  GKE-Setup-Production-Cluster:
    name: Setup GKE Cluster for Production
    needs: [Test-Testing-Cluster]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate cred.json
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: Terraform-Autopilot/cred.json
          content: ${{ secrets.GCP_CREDENTIAL }}
          mode: 744
      - name: Activate GCP Service Account
        run: >
          gcloud auth activate-service-account --key-file=cred.json;
          gcloud container clusters get-credentials gifs-website-prod --region us-central1 --project lofty-dynamics-393510;
          sudo apt install jq -y;
        working-directory: Terraform-Autopilot

      - name: Deploy to Production Env GCP Cluster
        run: >
          kubectl config use-context gke_lofty-dynamics-393510_us-central1_gifs-website-prod; 
          bash changeTagflask.sh danielpinhas/flask-k8s;
          bash changeTagflask.sh danielpinhas/flask2-k8s;
          bash changeTagflask.sh danielpinhas/flask3-k8s;
          kubectl apply -f service-html.yml;
          kubectl apply -f flask-prod.yml;
          sleep 60;
          bash updateHTML.sh;
          kubectl apply -f httpd-deploy-prod.yml;
          echo 'Deploy Application into Production GCP Cluster Completed';
        working-directory: charts-prod

  Test-Production-Server:
    name: Testing Prod-Server
    runs-on: ubuntu-latest
    needs: [GKE-Setup-Production-Cluster]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test Production Server
        run: >
          bash ingressIP.sh;
          bash prod.sh;
          echo 'Testing Prod-Server Stage Completed';
        working-directory: tests